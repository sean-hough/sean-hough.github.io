{"version":3,"sources":["components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/Login.js","components/Todo/Todo.js","components/Todo/TodoList.js","components/App.js","index.js"],"names":["FirebaseContext","React","createContext","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","getUser","auth","currentUser","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","updatePassword","app","initializeApp","this","INITIAL_STATE","error","SignInForm","props","onSubmit","event","state","firebase","then","authUser","setState","catch","preventDefault","onChange","target","name","value","class","type","placeholder","onClick","handleUp","bind","message","Component","SignInPage","Consumer","Todo","todo","toggleTodo","checked","complete","id","hours","TodoList","useState","todos","setTodos","todoNameRef","useRef","todoHoursRef","newTodos","find","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","map","key","ref","e","current","prevTodos","uuidv4","filter","length","App","User","onAuthStateChanged","user","setstate","authListener","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.2faa7ad7.chunk.js","sourcesContent":["import React from 'react';\r\n \r\nconst FirebaseContext = React.createContext(null);\r\n \r\nexport default FirebaseContext;","import app from 'firebase/app';\r\nimport 'firebase/auth'\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBGXOZiYUn_yMSrZmiAxDZKXAryzwzYEdg\",\r\n    authDomain: \"hackcmu2020-d7d2a.firebaseapp.com\",\r\n    databaseURL: \"https://hackcmu2020-d7d2a.firebaseio.com\",\r\n    projectId: \"hackcmu2020-d7d2a\",\r\n    storageBucket: \"hackcmu2020-d7d2a.appspot.com\",\r\n    messagingSenderId: \"836518917843\",\r\n    appId: \"1:836518917843:web:36cb7f912a49cac7e14626\",\r\n    measurementId: \"G-BWYXKGHBQW\"\r\n  };    \r\n\r\nexport default class Firebase {  \r\n    constructor() {\r\n        app.initializeApp(config);\r\n        this.auth = app.auth()\r\n        \r\n    }\r\n    getUser = () => this.auth.currentUser\r\n\r\n    doCreateUserWithEmailAndPassword = (email, password) =>\r\n    this.auth.createUserWithEmailAndPassword(email, password);\r\n \r\n    doSignInWithEmailAndPassword = (email, password) =>\r\n    this.auth.signInWithEmailAndPassword(email, password);\r\n \r\n    doSignOut = () => this.auth.signOut();\r\n \r\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\r\n \r\n    doPasswordUpdate = password =>\r\n    this.auth.currentUser.updatePassword(password);\r\n}\r\n","import FirebaseContext from './context';\r\nimport Firebase from './firebase';\r\n \r\nexport default Firebase;\r\n \r\nexport { FirebaseContext };","import React, { Component } from 'react';\r\nimport Firebase, { FirebaseContext } from './Firebase';\r\nimport './Login.css';\r\n\r\nconst INITIAL_STATE = {\r\n    email: '',\r\n    password: '',\r\n    error: null,\r\n  };\r\n\r\nconst SignInPage = () => (\r\n    <div>\r\n      <FirebaseContext.Consumer>\r\n      {firebase => <SignInForm firebase={firebase} />}\r\n    </FirebaseContext.Consumer>\r\n    </div>\r\n  );\r\n\r\nclass SignInForm extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = { ...INITIAL_STATE };\r\n    }\r\n\r\n    handleUp(event) {\r\n        const { email, password } = this.state;\r\n \r\n        this.props.firebase\r\n            .doCreateUserWithEmailAndPassword(email, password)\r\n            .then(authUser => {\r\n                this.setState({ ...INITIAL_STATE });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error });\r\n            });\r\n\r\n        event.preventDefault();\r\n    }\r\n   \r\n    onSubmit = event => {\r\n        const { email, password } = this.state;\r\n \r\n        this.props.firebase\r\n            .doSignInWithEmailAndPassword(email, password)\r\n            .then(authUser => {\r\n                this.setState({ ...INITIAL_STATE });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error });\r\n            });\r\n \r\n    event.preventDefault();\r\n    }\r\n   \r\n    onChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n   \r\n    render() {\r\n        const {\r\n            email,\r\n            password,\r\n            error,\r\n          } = this.state;\r\n      return (\r\n        <div>\r\n          <div class=\"loginbox\">\r\n              <h1>Login Here</h1>\r\n                   <form onSubmit={this.onSubmit}>\r\n                     <p> Email </p>\r\n                     <input\r\n                            name=\"email\"\r\n                            value={email}\r\n                            onChange={this.onChange}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Email\"\r\n                        />\r\n                      <p> Password </p>\r\n                      <input\r\n                            name=\"password\"\r\n                            value={password}\r\n                            onChange={this.onChange}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Password\"\r\n                        />\r\n                     <br/>\r\n                     <input type=\"submit\" name=\"\" value=\"Login\"/>\r\n                     <input type=\"submit\" onClick={this.handleUp.bind(this)} name=\"\" value=\"Register\"/>\r\n\r\n                       {error && <p>{error.message}</p>}\r\n                     </form>\r\n                 </div>\r\n             </div>\r\n        \r\n            \r\n \r\n      );\r\n    }\r\n}\r\n\r\nexport default SignInPage;\r\n \r\nexport { SignInForm };\r\n\r\n\r\n/* <button type=\"submit\">Sign In</button> */\r\n// export default class Login extends React.Component {\r\n//     render () {\r\n//         return (\r\n//             <div>\r\n//                 <div class=\"loginbox\">\r\n//                     <h1>Login Here</h1>\r\n//                     <form>\r\n//                     <p> Username</p>\r\n//                     <input type=\"text\" name=\"\" placeholder=\"Enter Username\" />\r\n//                     <p> Password</p>\r\n//                     <input type=\"password\" name=\"\" placeholder=\"Enter Password\"/>\r\n//                     <br/>\r\n//                     <input type=\"submit\" name=\"\" value=\"Login\"/>\r\n//                     <input type=\"submit\" name=\"\" value=\"Sign Up\"/>\r\n//                     </form>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n","import React from 'react'\r\n//import Todo from './Todo'\r\nexport default function Todo( {todo, toggleTodo} ) {\r\n    //cannot directly pass in toggleTodo function because we will need to reference an id to toggle the correct todo\r\n    function handleTodoClick() {\r\n        toggleTodo(todo.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label>\r\n                <input type=\"checkbox\" checked={todo.complete} onChange={handleTodoClick}/>\r\n                {todo.name}\r\n                {todo.hours}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import Todo from './Todo';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n//library that allows us to create random ids for our todos\r\nimport uuidv4 from 'uuid/v4'\r\n\r\nconst LOCAL_STORAGE_KEY = 'todoApp.todos'\r\n\r\n//we are making keys unique -- react will only rerender changing components in array\r\nexport default function TodoList () {\r\n    const [todos, setTodos] = useState([])\r\n    const todoNameRef = useRef()\r\n    const todoHoursRef = useRef()\r\n    //any time our array of todos changes, we want to save our todos to local storage\r\n    //this will preserve todo tasks when we refresh the page\r\n\r\n    //even tho we have todos saved, we need to display them\r\n    useEffect(() => {\r\n        const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        if (storedTodos) setTodos(storedTodos)\r\n    }, [])\r\n    \r\n    //this function saves our todos to local storage upon refreshing\r\n    useEffect(() => {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\r\n    }, [todos])\r\n    //first variable is every single todo in the array\r\n    //second variable is the function that we call to update todos\r\n    \r\n    function toggleTodo(id) {\r\n        //creating a copy of our todos, modifying it, and then using that copy to set the new state\r\n        const newTodos = [...todos]\r\n        const todo = newTodos.find(todo => todo.id === id)\r\n        todo.complete = !todo.complete\r\n        setTodos(newTodos)\r\n    }\r\n    \r\n    //passing the todos we made to our todo list\r\n    function handleAddTodo(e) {\r\n        const name = todoNameRef.current.value\r\n        const hours = todoHoursRef.current.value\r\n        //const hours = todoHoursRef.current.value\r\n        if (name === '') return \r\n        if (hours === '') return\r\n        setTodos(prevTodos => {\r\n        return [...prevTodos, {id: uuidv4(), name: name, hours: \"    || hours left for task: \" + hours, complete: false}]\r\n        })\r\n        //logs the names of todos that we have added to our console on the website\r\n        todoHoursRef.current.value = null\r\n        todoNameRef.current.value = null //clears our input after we hit add todo\r\n        //take previous todo, add our new todo, and set new todos to that todo list\r\n        //we need to have access to the name typed into the \"Add Todo\" field\r\n    }\r\n        \r\n    function handleClearTodos() {\r\n        const newTodos = todos.filter(todo => !todo.complete)\r\n        setTodos(newTodos)\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n        {todos.map(todo => {\r\n            return <Todo key={todo.id} toggleTodo={toggleTodo} todo = {todo} /> })}        \r\n        <input ref={todoNameRef} type=\"text\" />\r\n        <input ref={todoHoursRef} type = \"text\" />\r\n        <button onClick={handleAddTodo}> Add Todo </button>\r\n        <button onClick={handleClearTodos}>Clear Complete</button>\r\n        <div>{todos.filter(todo => !todo.complete).length} left to do </div>  \r\n        </div>\r\n        )  \r\n}\r\n\r\n","import React, { setstate, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport Login from './Login'  \r\nimport TodoList from './Todo/TodoList';\r\n//library that allows us to create random ids for our todos\r\nimport uuidv4 from 'uuid/v4'\r\n\r\nconst LOCAL_STORAGE_KEY = 'todoApp.todos'\r\n\r\n  \r\n  export default class App extends React.Component {\r\n    authListener() {\r\n      this.props.firebase.auth.onAuthStateChanged((user) => {\r\n        this.setState({\"User\" : user})\r\n      });\r\n    }  \r\n    componentWillMount() {\r\n      this.authListener = this.authListener.bind(this);\r\n      this.authListener();\r\n    }  \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { User: this.props.firebase.getUser() };\r\n      props.firebase.auth.onAuthStateChanged(function(user) {\r\n        this.setstate(user)        \r\n      }); \r\n    }    \r\n\r\n    render() {\r\n      if (this.state[\"User\"] == null) {\r\n        return (<Login/>);\r\n      }\r\n      else {\r\n        // const [todos, setTodos] = this.setstate([])\r\n        // const todoNameRef = useRef()\r\n        // const todoHoursRef = useRef()\r\n        // //any time our array of todos changes, we want to save our todos to local storage\r\n        // //this will preserve todo tasks when we refresh the page\r\n        \r\n        // //even tho we have todos saved, we need to display them\r\n        // useEffect(() => {\r\n        //   const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        //   if (storedTodos) setTodos(storedTodos)\r\n        // }, [])\r\n      \r\n        // //this function saves our todos to local storage upon refreshing\r\n        // useEffect(() => {\r\n        //   localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\r\n        // }, [todos])\r\n        // //first variable is every single todo in the array\r\n        // //second variable is the function that we call to update todos\r\n\r\n        // function toggleTodo(id) {\r\n        //   //creating a copy of our todos, modifying it, and then using that copy to set the new state\r\n        //   const newTodos = [...todos]\r\n        //   const todo = newTodos.find(todo => todo.id === id)\r\n        //   todo.complete = !todo.complete\r\n        //   setTodos(newTodos)\r\n        // }\r\n        \r\n        // //passing the todos we made to our todo list\r\n        // function handleAddTodo(e) {\r\n        //   const name = todoNameRef.current.value\r\n        //   const hours = todoHoursRef.current.value\r\n        //   //const hours = todoHoursRef.current.value\r\n        //   if (name === '') return \r\n        //   if (hours === '') return\r\n        //   setTodos(prevTodos => {\r\n        //     return [...prevTodos, {id: uuidv4(), name: name, hours: \"    || hours left for task: \" + hours, complete: false}]\r\n        //   })\r\n        //   //logs the names of todos that we have added to our console on the website\r\n        //   todoHoursRef.current.value = null\r\n        //   todoNameRef.current.value = null //clears our input after we hit add todo\r\n        //   //take previous todo, add our new todo, and set new todos to that todo list\r\n        //   //we need to have access to the name typed into the \"Add Todo\" field\r\n        // }\r\n      \r\n        // function handleClearTodos() {\r\n        //   const newTodos = todos.filter(todo => !todo.complete)\r\n        //   setTodos(newTodos)\r\n        // }\r\n      \r\n        return (\r\n          <TodoList/>\r\n        )\r\n      }\r\n        // PUT MAIN PAGE COMPONENTS HERE\r\n        return this.state[\"User\"][\"email\"]\r\n      }\r\n    }\r\n\r\n  \r\n// function Todolist() {\r\n//   const [todos, setTodos] = useState(['Todo 1', 'Todo 2'])\r\n//   //first variable is every single todo in the array\r\n//   //second variable is the function that we call to update todos\r\n  \r\n//   //passing the todos we made to our todo list\r\n//   return (\r\n//     <>\r\n//       <TodoList todos = {todos} />\r\n      \r\n//       <input type=\"text\" />\r\n//       <button> Add Todo </button>\r\n//       <button> Clear Completed Todos </button>\r\n//       <div> 0 left to do </div>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n//export deafult App;\r\n  \r\n//   // ========================================\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n  export default class App extends React.Component {\r\n    authListener() {\r\n      this.props.firebase.auth.onAuthStateChanged((user) => {\r\n        this.setState({\"User\" : user})\r\n      });\r\n    }  \r\n    componentWillMount() {\r\n      this.authListener = this.authListener.bind(this);\r\n      this.authListener();\r\n    }  \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { User: this.props.firebase.getUser() };\r\n      props.firebase.auth.onAuthStateChanged(function(user) {\r\n        this.setstate(user)        \r\n      }); \r\n    }    \r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n            <FirebaseContext.Consumer>\r\n            {firebase => {if (firebase.getUser() == null) {\r\n                                return ( <Login/> )\r\n                             } else {\r\n                                 return (<p>hello world</p>)\r\n                             }\r\n                            }\r\n                }\r\n            </FirebaseContext.Consumer>\r\n            <TodoList />\r\n        </div>\r\n        );\r\n    }\r\n  }\r\n  */\r\n\r\n//need to very much change this to make it a react function/compatable with what we already have\r\n\r\n\r\n/*unction App() {\r\n  const [todos, setTodos] = useState([])\r\n  const todoNameRef = useRef()\r\n  //what is the difference between using the name ref and the hours ref\r\n  //need to make input hours correspond with the titles and show up\r\n  const todoHoursRef = useRef()\r\n  //any time our array of todos changes, we want to save our todos to local storage\r\n  //this will preserve todo tasks when we refresh the page\r\n  \r\n  //even tho we have todos saved, we need to display them\r\n  useEffect(() => {\r\n    //only call this function once -- right when our component loads\r\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n    if (storedTodos) setTodos(storedTodos)\r\n  }, [])\r\n\r\n  //this function saves our todos to local storage upon refreshing\r\n  useEffect(() => {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\r\n  }, [todos])\r\n  //first variable is every single todo in the array\r\n  //second variable is the function that we call to update todos\r\n  \r\n\r\n  //need to come up with a way to use this function -- need to pass into todolist\r\n  function toggleTodo(id) {\r\n    //creating a copy of our todos, modifying it, and then using that copy to set the new state\r\n    const newTodos = [...todos]\r\n    const todo = newTodos.find(todo => todo.id === id)\r\n    todo.complete = !todo.complete\r\n    setTodos(newTodos)\r\n  }\r\n  \r\n  \r\n  \r\n  //passing the todos we made to our todo list\r\n  function handleAddTodo(e) {\r\n    const name = todoNameRef.current.value\r\n    const hours = todoHoursRef.current.value\r\n    //const hours = todoHoursRef.current.value\r\n    if (name === '') return \r\n    if (hours === '') return\r\n    setTodos(prevTodos => {\r\n      return [...prevTodos, {id: uuidv4(), name: name, hours: \"    || hours left for task: \" + hours, complete: false}]\r\n    })\r\n    //logs the names of todos that we have added to our console on the website\r\n    todoHoursRef.current.value = null\r\n    todoNameRef.current.value = null //clears our input after we hit add todo\r\n    //take previous todo, add our new todo, and set new todos to that todo list\r\n    //we need to have access to the name typed into the \"Add Todo\" field\r\n  }\r\n\r\n  function handleClearTodos() {\r\n    const newTodos = todos.filter(todo => !todo.complete)\r\n    setTodos(newTodos)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TodoList todos = {todos} toggleTodo={toggleTodo} />\r\n      <input ref={todoNameRef} type=\"text\" />\r\n      <input ref={todoHoursRef} type = \"text\" />\r\n      <button onClick={handleAddTodo}> Add Todo </button>\r\n      <button onClick={handleClearTodos}>Clear Complete</button>\r\n      <div>{todos.filter(todo => !todo.complete).length} left to do </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;*/\r\n  \r\n//   // ========================================","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n \r\nimport './index.css';\r\n\r\nimport App from './components/App';\r\nimport Firebase, { FirebaseContext } from './components/Firebase';\r\n \r\nReactDOM.render(\r\n  <FirebaseContext.Provider value={new Firebase()}>\r\n    <FirebaseContext.Consumer>\r\n      {firebase => {return (<App firebase={firebase}/>)}}\r\n    </FirebaseContext.Consumer>\r\n  </FirebaseContext.Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}